#!/usr/bin/python


import Tkinter
import datetime
import dateutil.relativedelta
import logging
import os
import sys
import time

sys.path.append(os.path.dirname(sys.argv[0]))
sys.path.append('/usr/share/mfgames-media')
sys.path.append('/usr/local/share/mfgames-media')

import mfgames.media.mplayer


class RenderState(object):
    """Encapsulates the functionality for rendering text to the display."""

    def __init__(self):
        self.canvas_texts = []
        self.texts = []

    def add_line(self, text):
        """Adds a text line to the canvas in a manner like World of Goo."""

        # Delete all the lines currently on screen since I couldn't
        # figure out how to change text in a canvas "in place".
        for index in self.canvas_texts:
            self.canvas.delete(index)

        self.canvas_texts = []

        # If we have more than 10 items in the text, then pop off the
        # next one.
        if len(self.texts) >= 10:
            self.texts.pop()

        # Add the text to the list of text fields.
        self.texts.insert(0, text)

        # Display the text on the canvas.
        x = 20
        y = self.screen_height - 10
        color = 255

        delta_y = -55
        delta_color = -25

        for text in self.texts:
            # Create a line element inside the canvas.
            self.canvas_texts.append(
                self.canvas.create_text(
                    x,
                    y,
                    text=text,
                    fill="#{0:02X}{0:02X}{0:02X}".format(color),
                    anchor=Tkinter.SW,
                    font=(self.splash_font_name, self.splash_font_size)))

            # Adjust the various colors and deltas
            y = y + delta_y
            color = color + delta_color


def create_text():
    for i in range(10):
        # Shift the Y offset up so we don't have overlapping lines.
        y = y + dy
        color = color + dcolor

def format_time(d):
    """Formats the date time and returns the textual response.

    http://stackoverflow.com/questions/1551382/python-user-friendly-time-format
    """

    # Create some helper lambdas to make the English prettier.
    plural = lambda x: 's' if x > 1 else ''
    singular = lambda x: x[:-1]
    display_unit = lambda unit, name: '%s %s%s'%(unit, name, plural(unit)) if unit > 0 else ''

    # Get the time units we are interested in, those in the default
    # case, only # days and less are important. But it is possible the
    # user set the configuration to never expire.
    tm_units = ['years', 'months', 'days', 'hours', 'minutes', 'seconds']
    now = datetime.datetime.utcnow()

    rdelta = dateutil.relativedelta.relativedelta(now, d)

    for idx, tm_unit in enumerate(tm_units):
        first_unit_val = getattr(rdelta, tm_unit)
        
        if first_unit_val > 0:
            primary_unit = display_unit(first_unit_val, singular(tm_unit))

            # Grab the second unit to display.
            if idx < len(tm_units)-1:
                next_unit = tm_units[idx + 1]
                second_unit_val = getattr(rdelta, next_unit)
                
                if second_unit_val > 0:
                    secondary_unit = display_unit(
                        second_unit_val, singular(next_unit))
                    return primary_unit + ', '  + secondary_unit
            return primary_unit

    return None

def play_video(filename, state):
    state.root.lower()
    mfgames.media.mplayer.do_mplayer_tool(["play", filename])
    state.db.close()
    state.root.destroy()

def show_filename(filename, state):
    """Displays the filename on the screen, removing any directory roots
    and splitting the remaining directory components into new lines."""

    # Remove the directory roots.
    for root in state.directory_roots:
        filename = filename.replace(root, '')

    # Remove the possible directory root and strip off the extension.
    filename = filename.lstrip('/')
    filename = os.path.splitext(filename)[0]

    # Split out the directories and make each one its own line.
    prefix = ''
    for part in filename.split('/'):
        state.add_line(prefix + part)
        prefix = prefix + '  '

    state.add_line('')

def start_video(filename, state):
    """Starts the video in the given arguments or displays an error
    message and times out."""

    # Show the file we are trying to open.
    filename = os.path.abspath(filename)
    show_filename(filename, state)

    # Look to see if we have a record for this file.
    lookup = filename.replace("'", '')

    cursor = state.db.cursor()
    cursor.execute('SELECT position, duration, timestamp'
        + ' FROM bookmark'
        + " WHERE path='" + lookup + "'")
    dbrow = cursor.fetchone()
    cursor.close()

    if dbrow:
        last_played = datetime.datetime.strptime(
            dbrow[2],
            '%Y-%m-%d %H:%M:%S')
        last_played_formatted = format_time(last_played)
        state.add_line('Last played ' + last_played_formatted + ' ago')

    # Keep track if we have an error. If we do, we wait a period of time
    # then exit out.
    has_error = True
    
    # Check to see if the file exists first.
    if os.path.exists(filename):
        # Play the video using the mplayer tool.
        state.root.after(
            state.splash_play_pause,
            lambda: play_video(filename, state))
        has_error = False

    # If we still have an error, then we couldn't find the video file
    # to play. Pause for a short period of time, then close the
    # window.
    if has_error:
        state.add_line("Cannot find the video file to play!")
        state.db.close()
        state.root.after(
            state.splash_error_pause,
            lambda: state.root.destroy())

def do_mplayer_mythtv_tool(arguments):
    # Create a Tk window and scale it up to the full size of the window.
    root = Tkinter.Tk()
    screen_width = root.winfo_screenwidth()
    screen_height = root.winfo_screenheight()
    
    root.overrideredirect(1)
    root.geometry("{0}x{1}+0+0".format(screen_width, screen_height))

    # Logging
    logging.basicConfig(
        format=mfgames.media.mplayer.LOG_FORMAT,
        level=logging.DEBUG)

    # Database
    db = mfgames.media.mplayer.database_connect()

    # Keep track of the state variable so we can pass it over to the
    # render method.
    state = RenderState()
    state.db = db
    state.directory_roots = mfgames.media.mplayer.get_setting(
        db,
        "directory_roots").split(":")
    state.splash_error_pause = mfgames.media.mplayer.get_setting(
        db,
        "splash_error_pause")
    state.splash_play_pause = mfgames.media.mplayer.get_setting(
        db,
        "splash_play_pause")
    state.splash_font_name = mfgames.media.mplayer.get_setting(
        db,
        "splash_font_name")
    state.splash_font_size = mfgames.media.mplayer.get_setting(
        db,
        "splash_font_size")
    state.root = root
    state.screen_height = screen_height

    # Create a canvas for displaying data. We use a highlight
    # thickness of 0 so there is no visible border on the screen.
    canvas = Tkinter.Canvas(
        highlightthickness=0,
        background='black')
    canvas.pack(expand=Tkinter.YES, fill=Tkinter.BOTH)

    state.canvas = canvas

    # Show the main window
    root.after(0, lambda: start_video(arguments[0], state))
    root.mainloop()


if __name__ == "__main__":
    # MythTV will pass the filename, with spaces, as separate
    # arguments to this and we need to convert it into spaces. This
    # does assume that the is not double spaces in filanames.
    do_mplayer_mythtv_tool([" ".join(sys.argv[1:])])
